apiVersion: apps/v1
kind: Deployment
metadata:
  name: rss-frontend-deployment
  namespace: rss-frontend
  labels:
    app: rss-client
#  annotations:
#    deployment.kubernetes.io/revision: "1"
spec:
#  progressDeadlineSeconds: 600
  replicas: 1
#  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: rss-client
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: rss-client
    spec:
      containers:
      - image: sentrurion/rss-frontend:latest
        imagePullPolicy: Always
        name: rss-client
        ports:
        - containerPort: 80
          protocol: TCP
#
        resources: {}
        terminationMessagePath: /var/log/rss-frontend-termination-log
        terminationMessagePolicy: File
#        livenessProbe:
#          httpGet:
#            path: /rss
#            port: 80
#        startupProbe:
#          httpGet:
#            path: /rss
#            port: 80
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
#
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: rss-client
  name: rss-frontend-service
  namespace: rss-frontend
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: rss-client
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rss-frontend-ingress
  namespace: rss-frontend
  annotations:
#    kubernetes.io/ingress.class: nginx
#    ngnix.ingress.kubernetes.io/ssl-redirect: "false"
#    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /rss(.*)
        pathType: Prefix
        backend:
          service:
            name: rss-frontend-service
            port:
              number: 80
